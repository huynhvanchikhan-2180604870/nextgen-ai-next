"use client";

import { API_ENDPOINTS } from "../config/api.js";
import { api } from "./apiClient.js";

// Project Service for Next.js
export const projectService = {
  // Get all projects with pagination and filters
  async getProjects(params = {}) {
    try {
      console.log("üìÅ Fetching projects with params:", params);

      const queryParams = new URLSearchParams();

      // Add pagination
      if (params.page) queryParams.append("page", params.page);
      if (params.limit) queryParams.append("limit", params.limit);

      // Add filters
      if (params.category) queryParams.append("category", params.category);
      if (params.search) queryParams.append("search", params.search);
      if (params.sortBy) queryParams.append("sortBy", params.sortBy);
      if (params.sortOrder) queryParams.append("sortOrder", params.sortOrder);
      if (params.minPrice) queryParams.append("minPrice", params.minPrice);
      if (params.maxPrice) queryParams.append("maxPrice", params.maxPrice);
      if (params.featured) queryParams.append("featured", params.featured);

      const url = `${API_ENDPOINTS.PROJECTS.LIST}${
        queryParams.toString() ? `?${queryParams.toString()}` : ""
      }`;
      const response = await api.get(url);

      console.log("‚úÖ Projects fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching projects:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch d·ª± √°n");
    }
  },

  // Get project by ID
  async getProjectById(id) {
    try {
      console.log("üìÅ Fetching project by ID:", id);
      const url = API_ENDPOINTS.PROJECTS.DETAIL.replace(":id", id);
      const response = await api.get(url);

      console.log("‚úÖ Project fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching project:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i th√¥ng tin d·ª± √°n");
    }
  },

  // Get featured projects
  async getFeaturedProjects() {
    try {
      console.log("‚≠ê Fetching featured projects");
      const response = await api.get(API_ENDPOINTS.PROJECTS.FEATURED);

      console.log("‚úÖ Featured projects fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching featured projects:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i d·ª± √°n n·ªïi b·∫≠t");
    }
  },

  // Search projects
  async searchProjects(query, filters = {}) {
    try {
      console.log(
        "üîç Searching projects with query:",
        query,
        "filters:",
        filters
      );

      const queryParams = new URLSearchParams({ q: query });

      // Add filters
      if (filters.category) queryParams.append("category", filters.category);
      if (filters.minPrice) queryParams.append("minPrice", filters.minPrice);
      if (filters.maxPrice) queryParams.append("maxPrice", filters.maxPrice);
      if (filters.sortBy) queryParams.append("sortBy", filters.sortBy);
      if (filters.sortOrder) queryParams.append("sortOrder", filters.sortOrder);

      const url = `${API_ENDPOINTS.PROJECTS.SEARCH}?${queryParams.toString()}`;
      const response = await api.get(url);

      console.log("‚úÖ Search results:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error searching projects:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t√¨m ki·∫øm d·ª± √°n");
    }
  },

  // Get filter options
  async getFilterOptions() {
    try {
      console.log("üîç Fetching filter options");
      const response = await api.get(API_ENDPOINTS.PROJECTS.FILTER_OPTIONS);

      console.log("‚úÖ Filter options fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching filter options:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i t√πy ch·ªçn l·ªçc");
    }
  },

  // Create new project (authenticated users only)
  async createProject(projectData) {
    try {
      console.log("üìù Creating new project:", projectData);
      const response = await api.post(
        API_ENDPOINTS.PROJECTS.CREATE,
        projectData
      );

      console.log("‚úÖ Project created successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error creating project:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫°o d·ª± √°n m·ªõi");
    }
  },

  // Update project (authenticated users only)
  async updateProject(id, projectData) {
    try {
      console.log("üìù Updating project:", id, projectData);
      const url = API_ENDPOINTS.PROJECTS.UPDATE.replace(":id", id);
      const response = await api.put(url, projectData);

      console.log("‚úÖ Project updated successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error updating project:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t d·ª± √°n");
    }
  },

  // Delete project (authenticated users only)
  async deleteProject(id) {
    try {
      console.log("üóëÔ∏è Deleting project:", id);
      const url = API_ENDPOINTS.PROJECTS.DELETE.replace(":id", id);
      const response = await api.delete(url);

      console.log("‚úÖ Project deleted successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error deleting project:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ x√≥a d·ª± √°n");
    }
  },

  // Get user's projects (authenticated users only)
  async getUserProjects() {
    try {
      console.log("üë§ Fetching user's projects");
      const response = await api.get(API_ENDPOINTS.USER.VAULT);

      console.log("‚úÖ User projects fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching user projects:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i d·ª± √°n c·ªßa b·∫°n");
    }
  },

  // Add project to favorites (authenticated users only)
  async addToFavorites(projectId) {
    try {
      console.log("‚ù§Ô∏è Adding project to favorites:", projectId);
      const response = await api.post(`${API_ENDPOINTS.USER.FAVORITES}`, {
        projectId,
      });

      console.log("‚úÖ Project added to favorites:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error adding to favorites:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ th√™m v√†o y√™u th√≠ch");
    }
  },

  // Remove project from favorites (authenticated users only)
  async removeFromFavorites(projectId) {
    try {
      console.log("üíî Removing project from favorites:", projectId);
      const response = await api.delete(
        `${API_ENDPOINTS.USER.FAVORITES}/${projectId}`
      );

      console.log("‚úÖ Project removed from favorites:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error removing from favorites:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ x√≥a kh·ªèi y√™u th√≠ch");
    }
  },

  // Get user's favorite projects (authenticated users only)
  async getFavoriteProjects() {
    try {
      console.log("‚ù§Ô∏è Fetching favorite projects");
      const response = await api.get(API_ENDPOINTS.USER.FAVORITES);

      console.log("‚úÖ Favorite projects fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching favorite projects:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch y√™u th√≠ch");
    }
  },

  // Get project reviews
  async getProjectReviews(projectId, params = {}) {
    try {
      console.log("‚≠ê Fetching project reviews:", projectId);

      const queryParams = new URLSearchParams();
      if (params.page) queryParams.append("page", params.page);
      if (params.limit) queryParams.append("limit", params.limit);

      const url = `/projects/${projectId}/reviews${
        queryParams.toString() ? `?${queryParams.toString()}` : ""
      }`;
      const response = await api.get(url);

      console.log("‚úÖ Reviews fetched successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error fetching reviews:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ t·∫£i ƒë√°nh gi√°");
    }
  },

  // Add project review (authenticated users only)
  async addProjectReview(projectId, reviewData) {
    try {
      console.log("‚≠ê Adding project review:", projectId, reviewData);
      const response = await api.post(
        `/projects/${projectId}/reviews`,
        reviewData
      );

      console.log("‚úÖ Review added successfully:", response);
      return response;
    } catch (error) {
      console.error("‚ùå Error adding review:", error);
      throw new Error(error.message || "Kh√¥ng th·ªÉ th√™m ƒë√°nh gi√°");
    }
  },
};
